-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2023-05-31 12:20:06 EEST
--   site:      Oracle Database 12cR2
--   type:      Oracle Database 12cR2



DROP TABLE pbd_stud_121.elevi CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.elevi_spectacol CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.elevi_spectacol_istoric CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.grupe CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.instructori CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.pianisti CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.sali CASCADE CONSTRAINTS;

DROP TABLE pbd_stud_121.spectacole CASCADE CONSTRAINTS;

CREATE USER pbd_stud_121 IDENTIFIED BY ACCOUNT UNLOCK ;

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE OR REPLACE PACKAGE PBD_STUD_121.ACTUALIZARI IS
    PROCEDURE modifica_statut_grupa(p_id_grupa grupe.id_grupa%TYPE, p_statut grupe.statut%TYPE);
    PROCEDURE modifica_experienta_instructor(p_id_instructor instructori.id_instructor%TYPE, p_experienta instructori.experienta%TYPE);
    PROCEDURE modifica_experienta_pianist(p_id_pianist pianisti.id_pianist%TYPE, p_experienta pianisti.experienta%TYPE);
    PROCEDURE modifica_elev_statut_grupa_sala(p_id_elev elevi.id_elev%TYPE, p_id_grupa grupe.id_grupa%TYPE, p_statut elevi.statut%TYPE);
    PROCEDURE modifica_statut_elev(p_id_elev elevi.id_elev%TYPE, p_statut elevi.statut%TYPE);
END actualizari;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.ADAUGARE IS
    PROCEDURE elev_la_spectacol (v_id_elev elevi.id_elev%TYPE, v_nume_spectacol spectacole.nume_spectacol%TYPE);
    PROCEDURE nou_spectacol(nume spectacole.nume_spectacol%TYPE, capac spectacole.capacitate%TYPE, dat VARCHAR2);
    PROCEDURE nou_elev(p_statut elevi.statut%TYPE, p_nume elevi.nume%TYPE, p_prenume elevi.prenume%TYPE, p_varsta elevi.varsta%TYPE);
    PROCEDURE nou_instructor(p_nume instructori.nume%TYPE, p_prenume instructori.prenume%TYPE, p_statut instructori.statut%TYPE, 
                            p_experienta instructori.experienta%TYPE, p_id_grupa instructori.grupe_id_grupa%TYPE);
    PROCEDURE nou_pianist(p_nume pianisti.nume%TYPE, p_prenume pianisti.prenume%TYPE, p_statut pianisti.statut%TYPE, 
                            p_experienta pianisti.experienta%TYPE, p_id_grupa pianisti.grupe_id_grupa%TYPE);
    PROCEDURE nou_grupa(p_statut grupe.statut%TYPE, p_id_sala sali.id_sala%TYPE);
    PROCEDURE nou_sala(p_dimensiune sali.dimensiune%TYPE, p_capacitate sali.capacitate%TYPE);
    PROCEDURE elev_spect_istoric(p_id_elev elevi.id_elev%TYPE, p_id_grupa grupe.id_grupa%TYPE, p_id_spectacol spectacole.id_spectacol%TYPE);
    PROCEDURE add_elev_to_grupa(p_nume IN elevi.nume%TYPE,
                                p_prenume IN elevi.prenume%TYPE,
                                p_varsta IN elevi.varsta%TYPE,
                                p_id_grupa IN elevi.grupe_id_grupa%TYPE);
END adaugare;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.AVANSARE_ELEVI IS
g_trigger_invoked BOOLEAN := FALSE;
  PROCEDURE modifica(p_id_elev elevi.id_elev%TYPE); 
END avansare_elevi;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.ELEVI_PKG IS
  PROCEDURE verifica_daca_incape_elev_in_grupa(
    v_id_grupa IN grupe.statut%TYPE,
    v_id_elev IN elevi.id_elev%TYPE);
  FUNCTION is_capacitate_sala_depasita RETURN BOOLEAN;
END elevi_pkg;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.STERGERI IS 
    PROCEDURE elev(p_id_elev elevi.id_elev%TYPE);
    PROCEDURE elev_spectacol(p_id_elev elevi.id_elev%TYPE,
                                p_nume_spectacol spectacole.nume_spectacol%TYPE);
    PROCEDURE spectacol(p_nume spectacole.nume_spectacol%TYPE);
    PROCEDURE instructor(p_id_instructor instructori.id_instructor%TYPE);
    PROCEDURE pianist(p_id_pianist pianisti.id_pianist%TYPE);
    PROCEDURE sterge_spectacolele_la_care_a_participat_un_elev(p_id_elev elevi.id_elev%TYPE);
END;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.TESTARE_TRIGGERI IS
    PROCEDURE testeaza_trigger_actualizare_experienta_cadru_didactic_crapa;
    PROCEDURE testeaza_trigger_actualizare_experienta_cadru_didactic;
    PROCEDURE testeaza_adaugare_elev_in_spectacol_capacitate_atinsa_deja;
    PROCEDURE testeaza_adaugare_spectacol_data_in_viitor;
    PROCEDURE testeaza_introducere_elev_nou_grupa_unde_nu_mai_are_loc;
END;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.TESTARE_VIZUALIZARI IS
    PROCEDURE testeaza_afisare_elevi;
    PROCEDURE testeaza_afisare_elevi_din_grupa_5;
    PROCEDURE testeaza_afisare_elevi_din_grupa_invalida;
    PROCEDURE testeaza_afisare_grupe_din_sala_invalida;
    PROCEDURE testeaza_afisare_pianistul_grupei_1;
    PROCEDURE testeaza_afisare_pianist_grupa_invalida;
    PROCEDURE testeaza_afisare_spectacole_la_care_nu_au_fost_introdusi_elevi;
    PROCEDURE testeaza_afisare_grupe_in_care_mai_incap_elevi;
END;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.TESTE_ACTUALIZARI IS
    PROCEDURE testeaza_modifica_statut_grupa;
    PROCEDURE testeaza_modifica_statut_invalid_grupa;
    PROCEDURE testeaza_modifica_experienta_daca_e_invalida_conform_triggerului_instructor;
    PROCEDURE testeaza_modifica_experienta_instructor;
    PROCEDURE testeaza_modifica_experienta_daca_e_invalida_conform_triggerului_pianist;
    PROCEDURE testeaza_modifica_experienta_pianist;
END teste_actualizari;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.TESTE_ADAUGARI IS
    PROCEDURE testeaza_adaugare_spectacol_cu_capacitate_invalida;
    PROCEDURE testeaza_adaugare_spectacol_cu_data_invalida;
    PROCEDURE testeaza_adaugare_spectacol_cu_data_in_viitor;
    PROCEDURE testeaza_adaugare_spectacol_corect;
    PROCEDURE testeaza_adaugare_elev_la_spectacol_unde_nu_mai_are_loc;
    PROCEDURE testeaza_adaugare_elev_la_spectacol_inexistent;
    PROCEDURE testeaza_adaugare_elev_inexistent_la_spectacol;
    PROCEDURE testeaza_adaugare_elev_nou_cu_statut_invalid;
    PROCEDURE testeaza_adaugare_elev_nou_cu_varsta_invalida;
    PROCEDURE testeaza_adaugare_elev_nou_care_ar_trb_sa_ajunga_in_grupa_2;
    PROCEDURE testeaza_adaugare_nou_instructor_pentru_grupa_care_are_deja_unul;
    PROCEDURE testeaza_adaugare_nou_instructor;
    PROCEDURE testeaza_adaugare_nou_instructor_care_nu_corespunde_grupei;
    PROCEDURE testeaza_adaugare_nou_pianist_pentru_grupa_care_are_deja_unul;
    PROCEDURE testeaza_adaugare_nou_pianist;
    PROCEDURE testeaza_adaugare_nou_pianist_care_nu_corespunde_grupei;
    PROCEDURE testeaza_adaugare_noua_grupa_statut_invalid;
    PROCEDURE testeaza_adaugare_noua_grupa_in_sala_inexistenta;
    PROCEDURE testeaza_adaugare_noua_grupa;
    PROCEDURE testeaza_adaugare_sala_capacitate_invalida;
    PROCEDURE testeaza_adaugare_sala_dimensiune_invalida;
    PROCEDURE testeaza_adaugare_sala;
END teste_adaugari;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.TESTE_STERGERI IS
    PROCEDURE testeaza_stergere_elev_inexistent;
    PROCEDURE testeaza_stergere_elev_care_are_spectacole;
    PROCEDURE testeaza_stergere_elev_spectacol;
    PROCEDURE testeaza_stergere_spectacol;
    PROCEDURE testeaza_stergere_spectacol_inexistent;
    PROCEDURE testeaza_stergere_instructor_inexistent;
    PROCEDURE testeaza_stergere_pianist_inexistent;
    PROCEDURE testeaza_stergere_instructor;
    PROCEDURE testeaza_stergere_pianist; 
    PROCEDURE testeaza_adaugare_spectacol_data_in_viitor;
END;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.TESTE_TRANZACTII IS
    PROCEDURE testeaza_tranzactie_avansare_elev_reusita_cu_succes;
    PROCEDURE revino_la_datele_de_dinainte_de_tranzactie_pentru_retestare;
    PROCEDURE testeaza_tranzactie_cu_elev_deja_profesionist;
    PROCEDURE testeaza_avansare_elev_care_nu_mai_are_loc_in_grupa_avansata;
END;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.VERIFICARI IS
    PROCEDURE verifica_daca_exista_elev(p_id_elev IN elevi.id_elev%TYPE);
    PROCEDURE verifica_daca_exista_deja_spectacol_cu_acest_nume(p_nume IN spectacole.nume_spectacol%TYPE);
    PROCEDURE verifica_daca_capacitatea_e_corecta(p_capacitate IN spectacole.capacitate%TYPE);
    PROCEDURE verifica_daca_exista_sala(p_id_sala IN sali.id_sala%TYPE);
    PROCEDURE verifica_daca_exista_instructor(p_id_instructor IN instructori.id_instructor%TYPE);
    PROCEDURE verifica_daca_exista_pianist(p_id_pianist IN pianisti.id_pianist%TYPE);
    PROCEDURE verifica_daca_exsita_grupa(p_id_grupa IN grupe.id_grupa%TYPE);
    PROCEDURE verifica_daca_grupa_are_nevoie_de_instructor(p_id_grupa IN grupe.id_grupa%TYPE);
    PROCEDURE verifica_daca_grupa_are_nevoie_de_pianist(p_id_grupa IN grupe.id_grupa%TYPE);
    PROCEDURE verifica_daca_statutul_corespunde_grupei(p_id_grupa IN grupe.id_grupa%TYPE, statt IN grupe.statut%TYPE);
    PROCEDURE verifica_daca_exista_spectacol_cu_acest_nume(p_nume IN spectacole.nume_spectacol%TYPE);
    PROCEDURE verifica_daca_statutul_e_valid(p_statut IN elevi.statut%TYPE);
END verificari;
/

CREATE OR REPLACE PACKAGE PBD_STUD_121.VIZUALIZARI IS
    PROCEDURE afiseaza_elevi;
    PROCEDURE afiseaza_elevi_din_anumita_grupa(p_id_grupa grupe.id_grupa%TYPE);
    PROCEDURE afiseaza_grupele_asignate_unei_anumite_sali(p_id_sala sali.id_sala%TYPE);
    PROCEDURE afiseaza_pianistul_unei_grupe(p_id_grupa grupe.id_grupa%TYPE);
    PROCEDURE afiseaza_spectacolele_la_care_nu_au_fost_introdusi_elevi;
    PROCEDURE afiseaza_grupe_in_care_mai_incap_elevi;
    PROCEDURE afiseaza_elev(p_id_elev elevi.id_elev%TYPE);
    PROCEDURE afiseaza_spectacole_la_care_a_participat_elev(p_id_elev elevi.id_elev%TYPE);
    PROCEDURE afiseaza_spectacole_la_care_a_participat_elev_din_istoric(p_id_elev elevi.id_elev%TYPE);
END;
/

CREATE TABLE pbd_stud_121.elevi_spectacol (
    elevi_id_elev           NUMBER(6, 2) NOT NULL,
    elevi_id_grupa          NUMBER(6, 2) NOT NULL,
    elevi_id_sala           NUMBER(6, 2) NOT NULL,
    spectacole_id_spectacol NUMBER(6, 2) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

CREATE UNIQUE INDEX pbd_stud_121.relation_4_pk ON
    pbd_stud_121.elevi_spectacol (
        elevi_id_elev
    ASC,
        elevi_id_grupa
    ASC,
        elevi_id_sala
    ASC,
        spectacole_id_spectacol
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.elevi_spectacol
    ADD CONSTRAINT relation_4_pk PRIMARY KEY ( elevi_id_elev,
                                               elevi_id_grupa,
                                               elevi_id_sala,
                                               spectacole_id_spectacol )
        USING INDEX pbd_stud_121.relation_4_pk;


CREATE TABLE PBD_STUD_121.ELEVI_SPECTACOL_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ELEVI_ID_ELEV NUMBER (6,2) NOT NULL
 ,ELEVI_ID_GRUPA NUMBER (6,2) NOT NULL
 ,ELEVI_ID_SALA NUMBER (6,2) NOT NULL
 ,SPECTACOLE_ID_SPECTACOL NUMBER (6,2) NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.ELEVI_SPECTACOL_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.ELEVI_SPECTACOL for each row 
 Declare 
  rec PBD_STUD_121.ELEVI_SPECTACOL_JN%ROWTYPE; 
  blank PBD_STUD_121.ELEVI_SPECTACOL_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ELEVI_ID_ELEV := :NEW.ELEVI_ID_ELEV; 
      rec.ELEVI_ID_GRUPA := :NEW.ELEVI_ID_GRUPA; 
      rec.ELEVI_ID_SALA := :NEW.ELEVI_ID_SALA; 
      rec.SPECTACOLE_ID_SPECTACOL := :NEW.SPECTACOLE_ID_SPECTACOL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ELEVI_ID_ELEV := :OLD.ELEVI_ID_ELEV; 
      rec.ELEVI_ID_GRUPA := :OLD.ELEVI_ID_GRUPA; 
      rec.ELEVI_ID_SALA := :OLD.ELEVI_ID_SALA; 
      rec.SPECTACOLE_ID_SPECTACOL := :OLD.SPECTACOLE_ID_SPECTACOL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.ELEVI_SPECTACOL_JN VALUES rec; 
  END; 
  /CREATE OR REPLACE FUNCTION pbd_stud_121.numara_la_cate_spectacole_a_participat_un_elev (
    p_id_elev elevi.id_elev%TYPE
) RETURN NUMBER IS
    v_nr_spectacole NUMBER;
BEGIN
    SELECT
        COUNT(*)
    INTO v_nr_spectacole
    FROM
        elevi_spectacol
    WHERE
        elevi_id_elev = p_id_elev;

    RETURN v_nr_spectacole;
END;
/

CREATE TABLE pbd_stud_121.sali (
    id_sala    NUMBER(6, 2)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 MAXVALUE 10 NOCACHE ORDER )
    NOT NULL,
    dimensiune NUMBER(6, 2) NOT NULL,
    capacitate NUMBER(6) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

ALTER TABLE pbd_stud_121.sali ADD CONSTRAINT dimensiune_sala_check CHECK ( dimensiune > 10 );

ALTER TABLE pbd_stud_121.sali
    ADD CONSTRAINT check_capacitate CHECK ( capacitate BETWEEN 0 AND 10 );

CREATE UNIQUE INDEX pbd_stud_121.sali_pk ON
    pbd_stud_121.sali (
        id_sala
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.sali
    ADD CONSTRAINT sali_pk PRIMARY KEY ( id_sala )
        USING INDEX pbd_stud_121.sali_pk;


CREATE TABLE PBD_STUD_121.SALI_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_SALA NUMBER (6,2) NOT NULL
 ,DIMENSIUNE NUMBER (6,2) NOT NULL
 ,CAPACITATE NUMBER (6) NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.SALI_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.SALI for each row 
 Declare 
  rec PBD_STUD_121.SALI_JN%ROWTYPE; 
  blank PBD_STUD_121.SALI_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_SALA := :NEW.ID_SALA; 
      rec.DIMENSIUNE := :NEW.DIMENSIUNE; 
      rec.CAPACITATE := :NEW.CAPACITATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_SALA := :OLD.ID_SALA; 
      rec.DIMENSIUNE := :OLD.DIMENSIUNE; 
      rec.CAPACITATE := :OLD.CAPACITATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.SALI_JN VALUES rec; 
  END; 
  /CREATE TABLE pbd_stud_121.grupe (
    id_grupa     NUMBER(6, 2)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    statut       VARCHAR2(15 CHAR) DEFAULT 'incepatori' NOT NULL,
    sali_id_sala NUMBER(6, 2) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

ALTER TABLE pbd_stud_121.grupe
    ADD CONSTRAINT statut_grupa_check CHECK ( statut IN ( 'avansat', 'incepator', 'mediu', 'profesionist' ) );

CREATE UNIQUE INDEX pbd_stud_121.grupe_pk ON
    pbd_stud_121.grupe (
        id_grupa
    ASC,
        sali_id_sala
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.grupe
    ADD CONSTRAINT grupe_pk PRIMARY KEY ( id_grupa,
                                          sali_id_sala )
        USING INDEX pbd_stud_121.grupe_pk;


CREATE TABLE PBD_STUD_121.GRUPE_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_GRUPA NUMBER (6,2) NOT NULL
 ,STATUT VARCHAR2 (15 CHAR) NOT NULL
 ,SALI_ID_SALA NUMBER (6,2) NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.GRUPE_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.GRUPE for each row 
 Declare 
  rec PBD_STUD_121.GRUPE_JN%ROWTYPE; 
  blank PBD_STUD_121.GRUPE_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_GRUPA := :NEW.ID_GRUPA; 
      rec.STATUT := :NEW.STATUT; 
      rec.SALI_ID_SALA := :NEW.SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_GRUPA := :OLD.ID_GRUPA; 
      rec.STATUT := :OLD.STATUT; 
      rec.SALI_ID_SALA := :OLD.SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.GRUPE_JN VALUES rec; 
  END; 
  /CREATE TABLE pbd_stud_121.elevi (
    id_elev            NUMBER(6, 2)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    statut             VARCHAR2(15 CHAR) DEFAULT 'incepator' NOT NULL,
    nume               VARCHAR2(9 CHAR) NOT NULL,
    prenume            VARCHAR2(9 CHAR) NOT NULL,
    varsta             NUMBER(6, 2) NOT NULL,
    grupe_id_grupa     NUMBER(6, 2) NOT NULL,
    grupe_sali_id_sala NUMBER(6, 2) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

ALTER TABLE pbd_stud_121.elevi
    ADD CONSTRAINT statut_elev_check CHECK ( statut IN ( 'avansat', 'incepator', 'mediu', 'profesionist' ) );

ALTER TABLE pbd_stud_121.elevi ADD CONSTRAINT elevi_nume2_ck CHECK ( nume NOT LIKE '%[^A-Z]%' );

ALTER TABLE pbd_stud_121.elevi ADD CONSTRAINT elevi_prenume2_ck CHECK ( prenume NOT LIKE '%[^A-Z]%' );

ALTER TABLE pbd_stud_121.elevi
    ADD CONSTRAINT varsta_check CHECK ( varsta BETWEEN 4 AND 30 );

CREATE UNIQUE INDEX pbd_stud_121.elevi_pk ON
    pbd_stud_121.elevi (
        id_elev
    ASC,
        grupe_id_grupa
    ASC,
        grupe_sali_id_sala
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.elevi
    ADD CONSTRAINT elevi_nume_ck CHECK ( length(nume) > 1 );

ALTER TABLE pbd_stud_121.elevi
    ADD CONSTRAINT elevi_prenume_ck CHECK ( length(prenume) > 1 );

ALTER TABLE pbd_stud_121.elevi
    ADD CONSTRAINT elevi_pk PRIMARY KEY ( id_elev,
                                          grupe_id_grupa,
                                          grupe_sali_id_sala )
        USING INDEX pbd_stud_121.elevi_pk;


CREATE TABLE PBD_STUD_121.ELEVI_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_ELEV NUMBER (6,2) NOT NULL
 ,STATUT VARCHAR2 (15 CHAR) NOT NULL
 ,NUME VARCHAR2 (9 CHAR) NOT NULL
 ,PRENUME VARCHAR2 (9 CHAR) NOT NULL
 ,VARSTA NUMBER (6,2) NOT NULL
 ,GRUPE_ID_GRUPA NUMBER (6,2) NOT NULL
 ,GRUPE_SALI_ID_SALA NUMBER (6,2) NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.ELEVI_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.ELEVI for each row 
 Declare 
  rec PBD_STUD_121.ELEVI_JN%ROWTYPE; 
  blank PBD_STUD_121.ELEVI_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_ELEV := :NEW.ID_ELEV; 
      rec.STATUT := :NEW.STATUT; 
      rec.NUME := :NEW.NUME; 
      rec.PRENUME := :NEW.PRENUME; 
      rec.VARSTA := :NEW.VARSTA; 
      rec.GRUPE_ID_GRUPA := :NEW.GRUPE_ID_GRUPA; 
      rec.GRUPE_SALI_ID_SALA := :NEW.GRUPE_SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_ELEV := :OLD.ID_ELEV; 
      rec.STATUT := :OLD.STATUT; 
      rec.NUME := :OLD.NUME; 
      rec.PRENUME := :OLD.PRENUME; 
      rec.VARSTA := :OLD.VARSTA; 
      rec.GRUPE_ID_GRUPA := :OLD.GRUPE_ID_GRUPA; 
      rec.GRUPE_SALI_ID_SALA := :OLD.GRUPE_SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.ELEVI_JN VALUES rec; 
  END; 
  /CREATE OR REPLACE PROCEDURE PBD_STUD_121.ADAUGARE_ELEV_LA_GRUPA
(v_id_grupa IN grupe.statut%TYPE,
v_id_elev IN elevi.id_elev%TYPE,
v_flag OUT BOOLEAN)
IS
    v_id_sala sali.id_sala%TYPE;
    v_nr_elevi NUMBER;
    v_capacitate sali.capacitate%TYPE;
BEGIN
    SELECT sali_id_sala
    INTO v_id_sala
    FROM grupe
    WHERE id_grupa = v_id_grupa;

    --acum am nevoie de numarul de elevi din grupa
    SELECT count(*)
    INTO v_nr_elevi
    FROM elevi
    WHERE grupe_id_grupa = v_id_grupa;

    SELECT capacitate
    INTO v_capacitate
    FROM sali 
    WHERE id_sala = v_id_sala;

    IF v_nr_elevi >= v_capacitate THEN
        v_flag := true;
    ELSE 
        v_flag := false;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE PBD_STUD_121.ADD_ELEV_TO_GRUPA
(p_statut IN elevi.statut%TYPE,
p_nume IN elevi.nume%TYPE,
p_prenume IN elevi.prenume%TYPE,
p_varsta IN elevi.varsta%TYPE,
p_id_grupa IN elevi.grupe_id_grupa%TYPE)
IS
    v_id_sala sali.id_sala%TYPE;
BEGIN
    SELECT sali_id_sala
    INTO v_id_sala
    FROM grupe
    WHERE id_grupa = p_id_grupa;

    INSERT INTO elevi(statut, nume, prenume, varsta, grupe_id_grupa, grupe_sali_id_sala)
    VALUES (p_statut, p_nume, p_prenume, p_varsta, p_id_grupa, v_id_sala);

END;
/

CREATE OR REPLACE PROCEDURE PBD_STUD_121.VERIFICA_DACA_EXISTA_ELEV
(p_id_elev IN elevi.id_elev%TYPE)
IS
    CURSOR c IS
        SELECT nume
        FROM elevi
        WHERE id_elev = p_id_elev;
    v_nume elevi.nume%TYPE;
    inexistent EXCEPTION;
BEGIN 
    OPEN c;
    FETCH c INTO v_nume;
    IF c%ROWCOUNT = 0 THEN
        RAISE inexistent;
    END IF;
    EXCEPTION
        WHEN inexistent THEN
            RAISE_APPLICATION_ERROR(-20003,'Nu exista elev');
END;
/

CREATE OR REPLACE PROCEDURE PBD_STUD_121.VERIFICA_DACA_INCAPE_ELEV_IN_GRUPA
(v_id_grupa IN grupe.id_grupa%TYPE,
v_flag OUT BOOLEAN)
IS
    v_id_sala sali.id_sala%TYPE;
    v_nr_elevi NUMBER;
    v_capacitate sali.capacitate%TYPE;
BEGIN
    SELECT sali_id_sala
    INTO v_id_sala
    FROM grupe
    WHERE id_grupa = v_id_grupa;

    --acum am nevoie de numarul de elevi din grupa
    SELECT count(*)
    INTO v_nr_elevi
    FROM elevi
    WHERE grupe_id_grupa = v_id_grupa;

    SELECT capacitate
    INTO v_capacitate
    FROM sali 
    WHERE id_sala = v_id_sala;

--    dbms_output.put_line('Pentru grupa '||v_id_grupa);
--    dbms_output.put_line('Pentru sala '||v_id_sala);
--    dbms_output.put_line('Capacitatea este '||v_capacitate);
--    dbms_output.put_line('si s-au gasit '||v_nr_elevi);

    IF v_nr_elevi >= v_capacitate THEN
        v_flag := true;
    ELSE 
        v_flag := false;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE PBD_STUD_121.VERIFICA_DACA_INCAPE_ELEV_IN_GRUPA_TRIGGER
(v_id_grupa IN grupe.id_grupa%TYPE,
v_flag OUT BOOLEAN)
IS
    v_id_sala sali.id_sala%TYPE;
    v_nr_elevi NUMBER;
    v_capacitate sali.capacitate%TYPE;
BEGIN
    SELECT sali_id_sala
    INTO v_id_sala
    FROM grupe
    WHERE id_grupa = v_id_grupa;

    --acum am nevoie de numarul de elevi din grupa
    SELECT count(*)
    INTO v_nr_elevi
    FROM elevi
    WHERE grupe_id_grupa = v_id_grupa;

    SELECT capacitate
    INTO v_capacitate
    FROM sali 
    WHERE id_sala = v_id_sala;

--    dbms_output.put_line('Pentru grupa '||v_id_grupa);
--    dbms_output.put_line('Pentru sala '||v_id_sala);
--    dbms_output.put_line('Capacitatea este '||v_capacitate);
--    dbms_output.put_line('si s-au gasit '||v_nr_elevi);

    IF v_nr_elevi > v_capacitate THEN
        v_flag := true;
    ELSE 
        v_flag := false;
    END IF;
END;
/

CREATE TABLE pbd_stud_121.spectacole (
    id_spectacol   NUMBER(6, 2)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nume_spectacol VARCHAR2(50 CHAR) NOT NULL,
    capacitate     NUMBER(6, 2) DEFAULT 0 NOT NULL,
    data_spectacol DATE DEFAULT sysdate NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

ALTER TABLE pbd_stud_121.spectacole
    ADD CONSTRAINT capacitate_spectacol_check CHECK ( capacitate BETWEEN 0 AND 10 );

CREATE UNIQUE INDEX pbd_stud_121.spectacole_nume_spectacol_un ON
    pbd_stud_121.spectacole (
        nume_spectacol
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX pbd_stud_121.spectacole_pk ON
    pbd_stud_121.spectacole (
        id_spectacol
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.spectacole
    ADD CONSTRAINT spectacole_pk PRIMARY KEY ( id_spectacol )
        USING INDEX pbd_stud_121.spectacole_pk;

ALTER TABLE pbd_stud_121.spectacole
    ADD CONSTRAINT spectacole_nume_spectacol_un UNIQUE ( nume_spectacol )
        USING INDEX pbd_stud_121.spectacole_nume_spectacol_un;


CREATE TABLE PBD_STUD_121.SPECTACOLE_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_SPECTACOL NUMBER (6,2) NOT NULL
 ,NUME_SPECTACOL VARCHAR2 (50 CHAR) NOT NULL
 ,CAPACITATE NUMBER (6,2) NOT NULL
 ,DATA_SPECTACOL DATE NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.SPECTACOLE_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.SPECTACOLE for each row 
 Declare 
  rec PBD_STUD_121.SPECTACOLE_JN%ROWTYPE; 
  blank PBD_STUD_121.SPECTACOLE_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_SPECTACOL := :NEW.ID_SPECTACOL; 
      rec.NUME_SPECTACOL := :NEW.NUME_SPECTACOL; 
      rec.CAPACITATE := :NEW.CAPACITATE; 
      rec.DATA_SPECTACOL := :NEW.DATA_SPECTACOL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_SPECTACOL := :OLD.ID_SPECTACOL; 
      rec.NUME_SPECTACOL := :OLD.NUME_SPECTACOL; 
      rec.CAPACITATE := :OLD.CAPACITATE; 
      rec.DATA_SPECTACOL := :OLD.DATA_SPECTACOL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.SPECTACOLE_JN VALUES rec; 
  END; 
  /CREATE TABLE pbd_stud_121.elevi_spectacol_istoric (
    id_elev      NUMBER(6, 2),
    id_grupa     NUMBER(6, 2),
    id_spectacol NUMBER(6, 2)
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;


CREATE TABLE PBD_STUD_121.ELEVI_SPECTACOL_ISTORIC_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_ELEV NUMBER (6,2)
 ,ID_GRUPA NUMBER (6,2)
 ,ID_SPECTACOL NUMBER (6,2)
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.ELEVI_SPECTACOL_ISTORIC_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.ELEVI_SPECTACOL_ISTORIC for each row 
 Declare 
  rec PBD_STUD_121.ELEVI_SPECTACOL_ISTORIC_JN%ROWTYPE; 
  blank PBD_STUD_121.ELEVI_SPECTACOL_ISTORIC_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_ELEV := :NEW.ID_ELEV; 
      rec.ID_GRUPA := :NEW.ID_GRUPA; 
      rec.ID_SPECTACOL := :NEW.ID_SPECTACOL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_ELEV := :OLD.ID_ELEV; 
      rec.ID_GRUPA := :OLD.ID_GRUPA; 
      rec.ID_SPECTACOL := :OLD.ID_SPECTACOL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.ELEVI_SPECTACOL_ISTORIC_JN VALUES rec; 
  END; 
  /CREATE OR REPLACE PROCEDURE PBD_STUD_121.VERIFICA_DACA_NU_A_FOST_ATINSA_CAPACITATEA
(v_id_spectacol IN elevi_spectacol.spectacole_id_spectacol%TYPE,
v_flag OUT BOOLEAN)
IS
    v_nr_elevi NUMBER := 0;
    v_capacitate spectacole.capacitate%TYPE;

    TYPE typ_spect_rec IS RECORD (
       capacitate spectacole.capacitate%TYPE
    );
    TYPE typ_spect IS REF CURSOR RETURN typ_spect_rec;
    capac typ_spect;

    TYPE typ_nr_rec IS RECORD (
       nr_elevi_i NUMERIC
    );
    TYPE typ_nr IS REF CURSOR RETURN typ_nr_rec;
    nr_elevi typ_nr;

    v_nr_elevi_istoric NUMBER;

    excSpectacol exception;

BEGIN
    dbms_output.put_line(v_id_spectacol);
    OPEN capac FOR
            SELECT capacitate
            FROM spectacole
            WHERE id_spectacol = v_id_spectacol;
    FETCH capac INTO v_capacitate;
    dbms_output.put_line('v_capacitate gasita este ' || v_capacitate);
    IF capac%ROWCOUNT = 0 THEN
        RAISE excSpectacol;
    END IF; 
    SELECT count(*)
    INTO v_nr_elevi_istoric
    FROM elevi_spectacol_istoric
    WHERE id_spectacol = v_id_spectacol;
    OPEN nr_elevi FOR
            SELECT count(*)
            FROM elevi_spectacol
            WHERE spectacole_id_spectacol = v_id_spectacol;

    FETCH nr_elevi INTO v_nr_elevi;
    dbms_output.put_line('S-au gasit ' || v_nr_elevi);
    v_nr_elevi := v_nr_elevi + v_nr_elevi_istoric;
    if v_nr_elevi >= v_capacitate then
        v_flag := false;
    ELSE
        v_flag := true;
    END IF;

    EXCEPTION
    WHEN excSpectacol THEN
        RAISE_APPLICATION_ERROR(-20002, 'Nu s-a gasit spectacolul pe care il cautati');
    WHEN OTHERS THEN
        dbms_output.put_line('Error: ' || SQLERRM);

END;
/

CREATE TABLE pbd_stud_121.instructori (
    id_instructor      NUMBER(6)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nume               VARCHAR2(9 CHAR) NOT NULL,
    prenume            VARCHAR2(9 CHAR) NOT NULL,
    statut             VARCHAR2(15 CHAR) DEFAULT 'incepator' NOT NULL,
    experienta         NUMBER(6, 2) DEFAULT 0,
    grupe_id_grupa     NUMBER(6, 2) NOT NULL,
    grupe_sali_id_sala NUMBER(6, 2) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

ALTER TABLE pbd_stud_121.instructori ADD CONSTRAINT instructori_nume2_ck CHECK ( nume NOT LIKE '%[^A-Z]%' );

ALTER TABLE pbd_stud_121.instructori ADD CONSTRAINT instructori_prenume2_ck CHECK ( prenume NOT LIKE '%[^A-Z]%' );

ALTER TABLE pbd_stud_121.instructori
    ADD CONSTRAINT statut_check_instructor CHECK ( statut IN ( 'avansat', 'incepator', 'mediu', 'profesionist' ) );

ALTER TABLE pbd_stud_121.instructori ADD CONSTRAINT experienta_instructrori_check CHECK ( experienta > 0 );

CREATE UNIQUE INDEX pbd_stud_121.instructor_pk ON
    pbd_stud_121.instructori (
        id_instructor
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX pbd_stud_121.instructor__idx ON
    pbd_stud_121.instructori (
        grupe_id_grupa
    ASC,
        grupe_sali_id_sala
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.instructori
    ADD CONSTRAINT instructori_nume_ck CHECK ( length(nume) > 1 );

ALTER TABLE pbd_stud_121.instructori
    ADD CONSTRAINT instructori_prenume_ck CHECK ( length(prenume) > 1 );

ALTER TABLE pbd_stud_121.instructori
    ADD CONSTRAINT instructor_pk PRIMARY KEY ( id_instructor )
        USING INDEX pbd_stud_121.instructor_pk;


CREATE TABLE PBD_STUD_121.INSTRUCTORI_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_INSTRUCTOR NUMBER (6) NOT NULL
 ,NUME VARCHAR2 (9 CHAR) NOT NULL
 ,PRENUME VARCHAR2 (9 CHAR) NOT NULL
 ,STATUT VARCHAR2 (15 CHAR) NOT NULL
 ,EXPERIENTA NUMBER (6,2)
 ,GRUPE_ID_GRUPA NUMBER (6,2) NOT NULL
 ,GRUPE_SALI_ID_SALA NUMBER (6,2) NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.INSTRUCTORI_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.INSTRUCTORI for each row 
 Declare 
  rec PBD_STUD_121.INSTRUCTORI_JN%ROWTYPE; 
  blank PBD_STUD_121.INSTRUCTORI_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_INSTRUCTOR := :NEW.ID_INSTRUCTOR; 
      rec.NUME := :NEW.NUME; 
      rec.PRENUME := :NEW.PRENUME; 
      rec.STATUT := :NEW.STATUT; 
      rec.EXPERIENTA := :NEW.EXPERIENTA; 
      rec.GRUPE_ID_GRUPA := :NEW.GRUPE_ID_GRUPA; 
      rec.GRUPE_SALI_ID_SALA := :NEW.GRUPE_SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_INSTRUCTOR := :OLD.ID_INSTRUCTOR; 
      rec.NUME := :OLD.NUME; 
      rec.PRENUME := :OLD.PRENUME; 
      rec.STATUT := :OLD.STATUT; 
      rec.EXPERIENTA := :OLD.EXPERIENTA; 
      rec.GRUPE_ID_GRUPA := :OLD.GRUPE_ID_GRUPA; 
      rec.GRUPE_SALI_ID_SALA := :OLD.GRUPE_SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.INSTRUCTORI_JN VALUES rec; 
  END; 
  /CREATE TABLE pbd_stud_121.pianisti (
    id_pianist         NUMBER(6)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nume               VARCHAR2(9 CHAR) NOT NULL,
    prenume            VARCHAR2(9 CHAR) NOT NULL,
    statut             VARCHAR2(15 CHAR) DEFAULT 'incepator' NOT NULL,
    experienta         NUMBER(6, 2) DEFAULT 0,
    grupe_id_grupa     NUMBER(6, 2) NOT NULL,
    grupe_sali_id_sala NUMBER(6, 2) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
    )
NO INMEMORY;

ALTER TABLE pbd_stud_121.pianisti ADD CONSTRAINT pianisti_nume2_ck CHECK ( nume NOT LIKE '%[^A-Z]%' );

ALTER TABLE pbd_stud_121.pianisti ADD CONSTRAINT pianisti_prenume2_ck CHECK ( prenume NOT LIKE '%[^A-Z]%' );

ALTER TABLE pbd_stud_121.pianisti
    ADD CONSTRAINT statut_pianist_check CHECK ( statut IN ( 'avansat', 'incepator', 'mediu', 'profesionist' ) );

ALTER TABLE pbd_stud_121.pianisti ADD CONSTRAINT experienta_pianisti_check CHECK ( experienta > 0 );

CREATE UNIQUE INDEX pbd_stud_121.pianist_pk ON
    pbd_stud_121.pianisti (
        id_pianist
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX pbd_stud_121.pianist__idx ON
    pbd_stud_121.pianisti (
        grupe_id_grupa
    ASC,
        grupe_sali_id_sala
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE pbd_stud_121.pianisti
    ADD CONSTRAINT pianisti_nume_ck CHECK ( length(nume) > 1 );

ALTER TABLE pbd_stud_121.pianisti
    ADD CONSTRAINT pianisti_prenume_ck CHECK ( length(prenume) > 1 );

ALTER TABLE pbd_stud_121.pianisti
    ADD CONSTRAINT pianist_pk PRIMARY KEY ( id_pianist )
        USING INDEX pbd_stud_121.pianist_pk;


CREATE TABLE PBD_STUD_121.PIANISTI_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID_PIANIST NUMBER (6) NOT NULL
 ,NUME VARCHAR2 (9 CHAR) NOT NULL
 ,PRENUME VARCHAR2 (9 CHAR) NOT NULL
 ,STATUT VARCHAR2 (15 CHAR) NOT NULL
 ,EXPERIENTA NUMBER (6,2)
 ,GRUPE_ID_GRUPA NUMBER (6,2) NOT NULL
 ,GRUPE_SALI_ID_SALA NUMBER (6,2) NOT NULL
 );

CREATE OR REPLACE TRIGGER PBD_STUD_121.PIANISTI_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PBD_STUD_121.PIANISTI for each row 
 Declare 
  rec PBD_STUD_121.PIANISTI_JN%ROWTYPE; 
  blank PBD_STUD_121.PIANISTI_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID_PIANIST := :NEW.ID_PIANIST; 
      rec.NUME := :NEW.NUME; 
      rec.PRENUME := :NEW.PRENUME; 
      rec.STATUT := :NEW.STATUT; 
      rec.EXPERIENTA := :NEW.EXPERIENTA; 
      rec.GRUPE_ID_GRUPA := :NEW.GRUPE_ID_GRUPA; 
      rec.GRUPE_SALI_ID_SALA := :NEW.GRUPE_SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID_PIANIST := :OLD.ID_PIANIST; 
      rec.NUME := :OLD.NUME; 
      rec.PRENUME := :OLD.PRENUME; 
      rec.STATUT := :OLD.STATUT; 
      rec.EXPERIENTA := :OLD.EXPERIENTA; 
      rec.GRUPE_ID_GRUPA := :OLD.GRUPE_ID_GRUPA; 
      rec.GRUPE_SALI_ID_SALA := :OLD.GRUPE_SALI_ID_SALA; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PBD_STUD_121.PIANISTI_JN VALUES rec; 
  END; 
  /ALTER TABLE pbd_stud_121.elevi
    ADD CONSTRAINT elevi_grupe_fk FOREIGN KEY ( grupe_id_grupa,
                                                grupe_sali_id_sala )
        REFERENCES pbd_stud_121.grupe ( id_grupa,
                                        sali_id_sala )
    NOT DEFERRABLE;

ALTER TABLE pbd_stud_121.elevi_spectacol
    ADD CONSTRAINT elevi_spectacol_elevi_fk FOREIGN KEY ( elevi_id_elev,
                                                          elevi_id_grupa,
                                                          elevi_id_sala )
        REFERENCES pbd_stud_121.elevi ( id_elev,
                                        grupe_id_grupa,
                                        grupe_sali_id_sala )
    NOT DEFERRABLE;

ALTER TABLE pbd_stud_121.elevi_spectacol
    ADD CONSTRAINT elevi_spectacol_spectacole_fk FOREIGN KEY ( spectacole_id_spectacol )
        REFERENCES pbd_stud_121.spectacole ( id_spectacol )
    NOT DEFERRABLE;

ALTER TABLE pbd_stud_121.grupe
    ADD CONSTRAINT grupe_sali_fk FOREIGN KEY ( sali_id_sala )
        REFERENCES pbd_stud_121.sali ( id_sala )
    NOT DEFERRABLE;

ALTER TABLE pbd_stud_121.instructori
    ADD CONSTRAINT instructori_grupe_fk FOREIGN KEY ( grupe_id_grupa,
                                                      grupe_sali_id_sala )
        REFERENCES pbd_stud_121.grupe ( id_grupa,
                                        sali_id_sala )
    NOT DEFERRABLE;

ALTER TABLE pbd_stud_121.pianisti
    ADD CONSTRAINT pianisti_grupe_fk FOREIGN KEY ( grupe_id_grupa,
                                                   grupe_sali_id_sala )
        REFERENCES pbd_stud_121.grupe ( id_grupa,
                                        sali_id_sala )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER PBD_STUD_121.ACTUALIZARE_EXPERIENTA_INSTRUCTORI 
    BEFORE UPDATE OF EXPERIENTA ON PBD_STUD_121.INSTRUCTORI 
    FOR EACH ROW 
DECLARE
    experienta_exceptie EXCEPTION;
BEGIN   
    IF :new.experienta <= :old.experienta THEN
        RAISE experienta_exceptie;
    END IF;
    EXCEPTION
        WHEN experienta_exceptie THEN
            RAISE_APPLICATION_ERROR(-20033, 'Experienta invalida');
END; 
/

CREATE OR REPLACE TRIGGER PBD_STUD_121.ACTUALIZARE_EXPERIENTA_PIANISTI 
    BEFORE UPDATE OF EXPERIENTA ON PBD_STUD_121.PIANISTI 
    FOR EACH ROW 
DECLARE
    experienta_exceptie EXCEPTION;
BEGIN   
    IF :new.experienta <= :old.experienta THEN
        RAISE experienta_exceptie;
    END IF;
    EXCEPTION
        WHEN experienta_exceptie THEN
            RAISE_APPLICATION_ERROR(-20033, 'Experienta invalida');
END; 
/

CREATE OR REPLACE TRIGGER PBD_STUD_121.ADAUGARE_ELEV_IN_SPECTACOL 
    BEFORE INSERT ON PBD_STUD_121.ELEVI_SPECTACOL 
    FOR EACH ROW 
DECLARE
    v_flag BOOLEAN;
BEGIN
    dbms_output.put_line('AIIIIICI');
    dbms_output.put_line(:new.spectacole_id_spectacol);
    verifica_daca_nu_a_fost_atinsa_capacitatea(:new.spectacole_id_spectacol, v_flag);
    dbms_output.put_line('s-a executat asta');
    IF v_flag = false then   
        dbms_output.put_line('v_flag este false');
    ELSE 
        dbms_output.put_line('v_flag este true');
    END IF;
    IF v_flag = FALSE THEN
--        dbms_output.put_line('Nu mai sunt locuri disponibile pentru acest spectacol');
        RAISE_APPLICATION_ERROR(-20001,'Nu mai sunt locuri disponibile pentru acest spectacol');
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER PBD_STUD_121.TRG_DATA_SPECTACOL 
    BEFORE INSERT OR UPDATE ON PBD_STUD_121.SPECTACOLE 
    FOR EACH ROW 
BEGIN 
  IF(:new.data_spectacol>SYSDATE)
  THEN
    RAISE_APPLICATION_ERROR(-20001, 'Data invalida'||TO_CHAR(:new.data_spectacol,'DD.MM.YYYY HH24:MI:SS')||' trebuie sa fe mai mica decat data curenta.');
  END IF;
END; 
/

CREATE OR REPLACE TRIGGER PBD_STUD_121.VERIFICA_DACA_SE_POATE_INTRODUCE_ELEV_NOU_IN_GRUPA 
    BEFORE INSERT OR UPDATE OF GRUPE_ID_GRUPA ON PBD_STUD_121.ELEVI 
DECLARE
  ex_capacitate_sala_depasita EXCEPTION;
  TYPE elev_rec_type IS RECORD
    (p_id_grupa elevi.grupe_id_grupa%TYPE,
     p_id_elev elevi.id_elev%TYPE);
  TYPE rc_dept IS REF CURSOR RETURN elev_rec_type;
  rc rc_dept;
  el elev_rec_type;
  v_flag BOOLEAN;
BEGIN
  OPEN rc FOR
    SELECT grupe_id_grupa, id_elev
    FROM elevi;
  LOOP
    FETCH rc INTO el;
    verifica_daca_incape_elev_in_grupa_trigger(el.p_id_grupa, v_flag);
    IF v_flag = true then
        RAISE ex_capacitate_sala_depasita;
    END IF;
  EXIT WHEN rc%NOTFOUND;
  END LOOP;

EXCEPTION
  WHEN ex_capacitate_sala_depasita THEN 
    RAISE_APPLICATION_ERROR(-20004, 'Nu este loc in sala asignata grupei pentru elev');
  WHEN OTHERS THEN
    dbms_output.put_line('Error: ' || SQLERRM);
END; 
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.actualizari IS

    PROCEDURE modifica_statut_elev (
        p_id_elev elevi.id_elev%TYPE,
        p_statut  elevi.statut%TYPE
    ) IS
    BEGIN
        verificari.verifica_daca_statutul_e_valid(p_statut);
        verificari.verifica_daca_exista_elev(p_id_elev);
        UPDATE elevi
        SET
            statut = p_statut
        WHERE
            id_elev = p_id_elev;

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE modifica_elev_statut_grupa_sala (
        p_id_elev  elevi.id_elev%TYPE,
        p_id_grupa grupe.id_grupa%TYPE,
        p_statut   elevi.statut%TYPE
    ) IS
        v_id_sala sali.id_sala%TYPE;
    BEGIN
        verificari.verifica_daca_statutul_e_valid(p_statut);
        verificari.verifica_daca_exista_elev(p_id_elev);
        verificari.verifica_daca_exsita_grupa(p_id_grupa);
        SELECT
            sali_id_sala
        INTO v_id_sala
        FROM
            grupe
        WHERE
            id_grupa = p_id_grupa;

        UPDATE elevi
        SET
            grupe_id_grupa = p_id_grupa,
            grupe_sali_id_sala = v_id_sala,
            statut = p_statut
        WHERE
            id_elev = p_id_elev;

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE modifica_experienta_pianist (
        p_id_pianist pianisti.id_pianist%TYPE,
        p_experienta pianisti.experienta%TYPE
    ) IS
    BEGIN
        verificari.verifica_daca_exista_pianist(p_id_pianist);
        UPDATE pianisti
        SET
            experienta = p_experienta
        WHERE
            id_pianist = p_id_pianist;

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE modifica_experienta_instructor (
        p_id_instructor instructori.id_instructor%TYPE,
        p_experienta    instructori.experienta%TYPE
    ) IS
    BEGIN
        dbms_output.put_line('verific daca exista ' || p_id_instructor);
        verificari.verifica_daca_exista_instructor(p_id_instructor);
        UPDATE instructori
        SET
            experienta = p_experienta
        WHERE
            id_instructor = p_id_instructor;

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE modifica_statut_grupa (
        p_id_grupa grupe.id_grupa%TYPE,
        p_statut   grupe.statut%TYPE
    ) IS
        CURSOR c IS
        SELECT
            id_elev
        FROM
            elevi
        WHERE
            grupe_id_grupa = p_id_grupa;

        v_elev elevi.grupe_id_grupa%TYPE;
    BEGIN
        verificari.verifica_daca_statutul_e_valid(p_statut);
        verificari.verifica_daca_exsita_grupa(p_id_grupa);
        OPEN c;
        LOOP
            FETCH c INTO v_elev;
            EXIT WHEN c%notfound;
            UPDATE elevi
            SET
                statut = p_statut
            WHERE
                elevi.grupe_id_grupa = p_id_grupa;

        END LOOP;

        CLOSE c;
        UPDATE grupe
        SET
            statut = p_statut
        WHERE
            id_grupa = p_id_grupa;

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END modifica_statut_grupa;

END actualizari;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.adaugare IS

    statut_invalid EXCEPTION;
    PRAGMA exception_init ( statut_invalid, -20082 );

    PROCEDURE add_elev_to_grupa (
        p_nume     IN elevi.nume%TYPE,
        p_prenume  IN elevi.prenume%TYPE,
        p_varsta   IN elevi.varsta%TYPE,
        p_id_grupa IN elevi.grupe_id_grupa%TYPE
    ) IS
        v_id_sala sali.id_sala%TYPE;
        v_statut  elevi.statut%TYPE;
    BEGIN
        verificari.verifica_daca_exsita_grupa(p_id_grupa);
        SELECT
            sali_id_sala
        INTO v_id_sala
        FROM
            grupe
        WHERE
            id_grupa = p_id_grupa;

        SELECT
            statut
        INTO v_statut
        FROM
            grupe
        WHERE
            id_grupa = p_id_grupa;

        INSERT INTO elevi (
            statut,
            nume,
            prenume,
            varsta,
            grupe_id_grupa,
            grupe_sali_id_sala
        ) VALUES (
            v_statut,
            p_nume,
            p_prenume,
            p_varsta,
            p_id_grupa,
            v_id_sala
        );

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE elev_spect_istoric (
        p_id_elev      elevi.id_elev%TYPE,
        p_id_grupa     grupe.id_grupa%TYPE,
        p_id_spectacol spectacole.id_spectacol%TYPE
    ) IS
    BEGIN
        INSERT INTO elevi_spectacol_istoric (
            id_elev,
            id_grupa,
            id_spectacol
        ) VALUES (
            p_id_elev,
            p_id_grupa,
            p_id_spectacol
        );

    END;

    PROCEDURE nou_sala (
        p_dimensiune sali.dimensiune%TYPE,
        p_capacitate sali.capacitate%TYPE
    ) IS
        capacitate_invalida EXCEPTION;
        dimensiune_invalida EXCEPTION;
    BEGIN
        IF p_dimensiune < 10 THEN
            RAISE dimensiune_invalida;
        END IF;
        IF p_capacitate < 0 OR p_capacitate > 10 THEN
            RAISE capacitate_invalida;
        END IF;
        INSERT INTO sali (
            dimensiune,
            capacitate
        ) VALUES (
            p_dimensiune,
            p_capacitate
        );

    EXCEPTION
        WHEN dimensiune_invalida THEN
            raise_application_error(-20057, 'Dimensiune invalida');
        WHEN capacitate_invalida THEN
            raise_application_error(-20052, 'Capacitate invalida');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE nou_grupa (
        p_statut  grupe.statut%TYPE,
        p_id_sala sali.id_sala%TYPE
    ) IS
    BEGIN
        IF p_statut = 'incepator' OR p_statut = 'mediu' OR p_statut = 'avansat' OR p_statut = 'profesionist' THEN
            verificari.verifica_daca_exista_sala(p_id_sala);
            INSERT INTO grupe (
                statut,
                sali_id_sala
            ) VALUES (
                p_statut,
                p_id_sala
            );

        ELSE
            RAISE statut_invalid;
        END IF;
    EXCEPTION
        WHEN statut_invalid THEN
            raise_application_error(-20082, 'Statut invalid');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE nou_pianist (
        p_nume       pianisti.nume%TYPE,
        p_prenume    pianisti.prenume%TYPE,
        p_statut     pianisti.statut%TYPE,
        p_experienta pianisti.experienta%TYPE,
        p_id_grupa   pianisti.grupe_id_grupa%TYPE
    ) IS
        experienta_invalida EXCEPTION;
        v_id_sala grupe.sali_id_sala%TYPE;
    BEGIN
        verificari.verifica_daca_grupa_are_nevoie_de_pianist(p_id_grupa);
        IF p_statut = 'incepator' OR p_statut = 'mediu' OR p_statut = 'avansat' OR p_statut = 'profesionist' THEN
            verificari.verifica_daca_exsita_grupa(p_id_grupa);
            IF p_experienta > 0 THEN
                verificari.verifica_daca_statutul_corespunde_grupei(p_id_grupa, p_statut);
                SELECT
                    sali_id_sala
                INTO v_id_sala
                FROM
                    grupe
                WHERE
                    id_grupa = p_id_grupa;

                INSERT INTO pianisti (
                    nume,
                    prenume,
                    statut,
                    experienta,
                    grupe_id_grupa,
                    grupe_sali_id_sala
                ) VALUES (
                    p_nume,
                    p_prenume,
                    p_statut,
                    p_experienta,
                    p_id_grupa,
                    v_id_sala
                );

            ELSE
                RAISE experienta_invalida;
            END IF;

        ELSE
            RAISE statut_invalid;
        END IF;

    EXCEPTION
        WHEN experienta_invalida THEN
            raise_application_error(-20076, 'Experienta introdusa este invalida');
        WHEN statut_invalid THEN
            raise_application_error(-20082, 'Statut invalid');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE nou_instructor (
        p_nume       instructori.nume%TYPE,
        p_prenume    instructori.prenume%TYPE,
        p_statut     instructori.statut%TYPE,
        p_experienta instructori.experienta%TYPE,
        p_id_grupa   instructori.grupe_id_grupa%TYPE
    ) IS
        experienta_invalida EXCEPTION;
        v_id_sala grupe.sali_id_sala%TYPE;
    BEGIN
        verificari.verifica_daca_grupa_are_nevoie_de_instructor(p_id_grupa);
        IF p_statut = 'incepator' OR p_statut = 'mediu' OR p_statut = 'avansat' OR p_statut = 'profesionist' THEN
            verificari.verifica_daca_exsita_grupa(p_id_grupa);
            IF p_experienta > 0 THEN
                verificari.verifica_daca_statutul_corespunde_grupei(p_id_grupa, p_statut);
                SELECT
                    sali_id_sala
                INTO v_id_sala
                FROM
                    grupe
                WHERE
                    id_grupa = p_id_grupa;

                INSERT INTO instructori (
                    nume,
                    prenume,
                    statut,
                    experienta,
                    grupe_id_grupa,
                    grupe_sali_id_sala
                ) VALUES (
                    p_nume,
                    p_prenume,
                    p_statut,
                    p_experienta,
                    p_id_grupa,
                    v_id_sala
                );

            ELSE
                RAISE experienta_invalida;
            END IF;

        ELSE
            RAISE statut_invalid;
        END IF;

    EXCEPTION
        WHEN experienta_invalida THEN
            raise_application_error(-20076, 'Experienta introdusa este invalida');
        WHEN statut_invalid THEN
            raise_application_error(-20082, 'Statut invalid');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE nou_elev (
        p_statut  elevi.statut%TYPE,
        p_nume    elevi.nume%TYPE,
        p_prenume elevi.prenume%TYPE,
        p_varsta  elevi.varsta%TYPE
    ) IS

        varsta_invalida EXCEPTION;
        CURSOR c IS
        SELECT
            id_grupa
        FROM
            grupe
        WHERE
            statut = p_statut;

        v_flag         BOOLEAN;
        v_id_grupa     grupe.id_grupa%TYPE;
        v_grupa_gasita BOOLEAN := false;
        v_id_sala      sali.id_sala%TYPE;
    BEGIN
        IF p_statut = 'incepator' OR p_statut = 'mediu' OR p_statut = 'avansat' OR p_statut = 'profesionist' THEN
            IF
                p_varsta >= 4
                AND p_varsta <= 30
            THEN
                OPEN c;
                LOOP
                    FETCH c INTO v_id_grupa;
                    EXIT WHEN c%notfound OR v_grupa_gasita = true;
                    dbms_output.put_line('Eu trimit ' || v_id_grupa);
                    verifica_daca_incape_elev_in_grupa(v_id_grupa, v_flag);
                    IF v_flag = false THEN
                        v_grupa_gasita := true;
                        SELECT
                            sali_id_sala
                        INTO v_id_sala
                        FROM
                            grupe
                        WHERE
                            id_grupa = v_id_grupa;

                        dbms_output.put_line('INCERC SA IL INTRODUC IN grupa ' || v_id_grupa);
                        INSERT INTO elevi (
                            statut,
                            nume,
                            prenume,
                            varsta,
                            grupe_id_grupa,
                            grupe_sali_id_sala
                        ) VALUES (
                            p_statut,
                            p_nume,
                            p_prenume,
                            p_varsta,
                            v_id_grupa,
                            v_id_sala
                        );

                        COMMIT;
                    END IF;

                END LOOP;

                CLOSE c;
            ELSE
                RAISE varsta_invalida;
            END IF;

        ELSE
            RAISE statut_invalid;
        END IF;
    EXCEPTION
        WHEN varsta_invalida THEN
            raise_application_error(-20081, 'Varsta introdusa nu este valida');
        WHEN statut_invalid THEN
            raise_application_error(-20082, 'Statut invalid');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE elev_la_spectacol (
        v_id_elev        elevi.id_elev%TYPE,
        v_nume_spectacol spectacole.nume_spectacol%TYPE
    ) IS

        v_id_spectacol spectacole.id_spectacol%TYPE;
        v_id_grupa     grupe.id_grupa%TYPE;
        v_id_sala      sali.id_sala%TYPE;
        TYPE typ_spect_rec IS RECORD (
            id_spectacol spectacole.id_spectacol%TYPE
        );
        TYPE typ_spect IS REF CURSOR RETURN typ_spect_rec;
        spect          typ_spect;
        TYPE typ_grup_rec IS RECORD (
            id_grupa elevi.grupe_id_grupa%TYPE,
            id_sala  grupe.sali_id_sala%TYPE
        );
        TYPE typ_grup IS REF CURSOR RETURN typ_grup_rec;
        grup           typ_grup;
        nu_exista_spectacol EXCEPTION;
        nu_exista_elev EXCEPTION;
    BEGIN
        OPEN spect FOR SELECT
                                          id_spectacol
                                      FROM
                                          spectacole
                       WHERE
                           nume_spectacol = v_nume_spectacol;

        FETCH spect INTO v_id_spectacol;
        IF spect%rowcount = 0 THEN
            CLOSE spect; -- Close the cursor if no data found
            RAISE nu_exista_spectacol;
        END IF;
        OPEN grup FOR SELECT
                                        grupe_id_grupa,
                                        grupe_sali_id_sala
                                    FROM
                                        elevi
                      WHERE
                          id_elev = v_id_elev;

        FETCH grup INTO
            v_id_grupa,
            v_id_sala;
        IF grup%rowcount = 0 THEN
            CLOSE grup; -- Close the cursor if no data found
            RAISE nu_exista_elev;
        END IF;
        INSERT INTO elevi_spectacol (
            elevi_id_elev,
            elevi_id_grupa,
            elevi_id_sala,
            spectacole_id_spectacol
        ) VALUES (
            v_id_elev,
            v_id_grupa,
            v_id_sala,
            v_id_spectacol
        );

        dbms_output.put_line('adaugat');
        COMMIT;
    EXCEPTION
        WHEN nu_exista_spectacol THEN
            raise_application_error(-20001, 'Nu exista spectacol cu acest nume');
        WHEN nu_exista_elev THEN
            raise_application_error(-20003, 'Nu exista elevul pe care incercati sa il adaugati');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END elev_la_spectacol;

    PROCEDURE nou_spectacol (
        nume  IN spectacole.nume_spectacol%TYPE,
        capac IN spectacole.capacitate%TYPE,
        dat   IN VARCHAR2
    ) IS
        v_date spectacole.data_spectacol%TYPE;
    BEGIN
        dbms_output.put_line('incerc data ' || TO_DATE(dat, 'YYYY-MM-DD'));
        v_date := TO_DATE ( dat, 'YYYY-MM-DD' );
        verificari.verifica_daca_exista_deja_spectacol_cu_acest_nume(nume);
        verificari.verifica_daca_capacitatea_e_corecta(capac);
        INSERT INTO spectacole (
            nume_spectacol,
            capacitate,
            data_spectacol
        ) VALUES (
            nume,
            capac,
            v_date
        );

    EXCEPTION
        WHEN value_error THEN
            raise_application_error(-20094, 'Input value is not a valid date');
        WHEN OTHERS THEN
            IF sqlcode = -1861 THEN
                raise_application_error(-20001, 'Data introdusa este invalida.');
            ELSE
                dbms_output.put_line('Error: ' || sqlerrm);
            END IF;
    END;

END adaugare;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.avansare_elevi IS

    FUNCTION urmatoarul_statut (
        statut_curent elevi.statut%TYPE
    ) RETURN elevi.statut%TYPE IS
        v_statut_nou elevi.statut%TYPE;
        statut_inexistent EXCEPTION;
        nu_mai_poate_avansa EXCEPTION;
    BEGIN
        IF statut_curent = 'incepator' THEN
            v_statut_nou := 'mediu';
        ELSIF statut_curent = 'mediu' THEN
            v_statut_nou := 'avansat';
        ELSIF statut_curent = 'avansat' THEN
            v_statut_nou := 'profesionist';
        ELSIF statut_curent = 'profesionist' THEN
            RAISE nu_mai_poate_avansa;
        ELSE
            RAISE statut_inexistent;
        END IF;

        RETURN v_statut_nou;
    EXCEPTION
        WHEN statut_inexistent THEN
            raise_application_error(-20006, 'Statut invalid');
        WHEN nu_mai_poate_avansa THEN
            raise_application_error(-20010, 'Elevul nu mai poate avansa');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END urmatoarul_statut;

    PROCEDURE modifica (
        p_id_elev elevi.id_elev%TYPE
    ) IS

        v_statut_nou   elevi.statut%TYPE;
        v_statut_vechi elevi.statut%TYPE;
        TYPE date_table_type IS
            TABLE OF elevi.grupe_id_grupa%TYPE INDEX BY BINARY_INTEGER;
        data_table     date_table_type;
        TYPE typ_spect_rec IS RECORD (
            id_grp grupe.id_grupa%TYPE
        );
        TYPE typ_spect IS REF CURSOR RETURN typ_spect_rec;
        grp            typ_spect;
        indx           NUMBER := 0;
        v_flag         BOOLEAN;
        v_curent       NUMBER;
        v_grupa_gasita BOOLEAN := false;
        inca_nu_avanseaza EXCEPTION;
        nu_exista_grupe_cu_acest_statut EXCEPTION;
        v_row_s        elevi_spectacol%rowtype;
        CURSOR c_spect IS
        SELECT
            *
        FROM
            elevi_spectacol
        WHERE
            elevi_id_elev = p_id_elev;

    BEGIN
        verificari.verifica_daca_exista_elev(p_id_elev);
        SELECT
            statut
        INTO v_statut_vechi
        FROM
            elevi
        WHERE
            id_elev = p_id_elev;

        v_statut_nou := urmatoarul_statut(v_statut_vechi);
        OPEN grp FOR SELECT
                                      id_grupa
                                  FROM
                                      grupe
                     WHERE
                         statut = v_statut_nou;

        LOOP
            FETCH grp INTO
                data_table
            (indx);
            EXIT WHEN grp%notfound;
            indx := indx + 1;
        END LOOP;

        CLOSE grp;
        v_curent := data_table.first;
        SAVEPOINT start_modifica;
        actualizari.modifica_statut_elev(p_id_elev, v_statut_nou);
        WHILE
            v_curent <= data_table.last
            AND v_grupa_gasita = false
        LOOP
            verifica_daca_incape_elev_in_grupa(data_table(v_curent), v_flag);
            IF v_flag = false THEN
                OPEN c_spect;
                LOOP
                    FETCH c_spect INTO v_row_s;
                    EXIT WHEN c_spect%notfound;
                    adaugare.elev_spect_istoric(p_id_elev, v_row_s.elevi_id_grupa, v_row_s.spectacole_id_spectacol);
                END LOOP;

                stergeri.sterge_spectacolele_la_care_a_participat_un_elev(p_id_elev);
                v_grupa_gasita := true;
                actualizari.modifica_elev_statut_grupa_sala(p_id_elev, data_table(v_curent), v_statut_nou);
            END IF;

            v_curent := data_table.next(v_curent);
        END LOOP;

        IF v_grupa_gasita = false THEN
            ROLLBACK TO start_modifica;
            RAISE inca_nu_avanseaza;
        END IF;
        COMMIT;
    EXCEPTION
        WHEN inca_nu_avanseaza THEN
            ROLLBACK;
            raise_application_error(-20007, 'Inca nu se poate muta elevul, se va astepta pana se elibereaza un loc');
        WHEN nu_exista_grupe_cu_acest_statut THEN
            ROLLBACK;
            raise_application_error(-20008, 'Nu s-au gasit grupe cu acel statut');
        WHEN OTHERS THEN
            ROLLBACK;
            dbms_output.put_line('Error: ' || sqlerrm);
    END modifica;

END avansare_elevi;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.elevi_pkg IS

    v_flag BOOLEAN := false;

    PROCEDURE verifica_daca_incape_elev_in_grupa (
        v_id_grupa IN grupe.statut%TYPE,
        v_id_elev  IN elevi.id_elev%TYPE
    ) IS
        v_id_sala    sali.id_sala%TYPE;
        v_nr_elevi   NUMBER;
        v_capacitate sali.capacitate%TYPE;
    BEGIN
        SELECT
            sali_id_sala
        INTO v_id_sala
        FROM
            grupe
        WHERE
            id_grupa = v_id_grupa;

    -- Get the number of elevi from the table
        SELECT
            COUNT(*)
        INTO v_nr_elevi
        FROM
            elevi
        WHERE
            grupe_id_grupa = v_id_grupa;

        SELECT
            capacitate
        INTO v_capacitate
        FROM
            sali
        WHERE
            id_sala = v_id_sala;

        IF v_nr_elevi > v_capacitate THEN
            v_flag := true;
        ELSE
            v_flag := false;
        END IF;

    END;

    FUNCTION is_capacitate_sala_depasita RETURN BOOLEAN IS
    BEGIN
        RETURN v_flag;
    END;

END elevi_pkg;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.stergeri IS

    PROCEDURE sterge_spectacolele_la_care_a_participat_un_elev (
        p_id_elev elevi.id_elev%TYPE
    ) IS
    BEGIN
        verificari.verifica_daca_exista_elev(p_id_elev);
        DELETE FROM elevi_spectacol
        WHERE
            elevi_id_elev = p_id_elev;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE instructor (
        p_id_instructor instructori.id_instructor%TYPE
    ) IS
    BEGIN
        verificari.verifica_daca_exista_instructor(p_id_instructor);
        DELETE FROM instructori
        WHERE
            id_instructor = p_id_instructor;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE pianist (
        p_id_pianist pianisti.id_pianist%TYPE
    ) IS
    BEGIN
        verificari.verifica_daca_exista_pianist(p_id_pianist);
        DELETE FROM pianisti
        WHERE
            id_pianist = p_id_pianist;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE spectacol (
        p_nume spectacole.nume_spectacol%TYPE
    ) IS
        v_id_spectacol spectacole.id_spectacol%TYPE;
    BEGIN
        verificari.verifica_daca_exista_spectacol_cu_acest_nume(p_nume);
        SELECT
            id_spectacol
        INTO v_id_spectacol
        FROM
            spectacole
        WHERE
            nume_spectacol = p_nume;

        DELETE FROM elevi_spectacol
        WHERE
            spectacole_id_spectacol = v_id_spectacol;

        DELETE FROM spectacole
        WHERE
            nume_spectacol = p_nume;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE elev_spectacol (
        p_id_elev        elevi.id_elev%TYPE,
        p_nume_spectacol spectacole.nume_spectacol%TYPE
    ) IS
        v_id_spectacol spectacole.id_spectacol%TYPE;
    BEGIN
        verificari.verifica_daca_exista_spectacol_cu_acest_nume(p_nume_spectacol);
        verificari.verifica_daca_exista_elev(p_id_elev);
        SELECT
            id_spectacol
        INTO v_id_spectacol
        FROM
            spectacole
        WHERE
            nume_spectacol = p_nume_spectacol;

        DELETE FROM elevi_spectacol
        WHERE
                elevi_id_elev = p_id_elev
            AND spectacole_id_spectacol = v_id_spectacol;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE elev (
        p_id_elev elevi.id_elev%TYPE
    ) IS
        CURSOR c IS
        SELECT
            *
        FROM
            elevi_spectacol
        WHERE
            elevi_id_elev = p_id_elev;

        v_row_elev elevi_spectacol%rowtype;
    BEGIN
        verificari.verifica_daca_exista_elev(p_id_elev);
        --iau spectacolele , le pun in istoric si le sterg din elevi_spectacol
        OPEN c;
        LOOP
            FETCH c INTO v_row_elev;
            EXIT WHEN c%notfound;
            INSERT INTO elevi_spectacol_istoric (
                id_elev,
                id_grupa,
                id_spectacol
            ) VALUES (
                v_row_elev.elevi_id_elev,
                v_row_elev.elevi_id_grupa,
                v_row_elev.spectacole_id_spectacol
            );

            COMMIT;
        END LOOP;

        DELETE FROM elevi_spectacol
        WHERE
            elevi_id_elev = p_id_elev;

        COMMIT;
        DELETE FROM elevi
        WHERE
            id_elev = p_id_elev;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.testare_triggeri IS

    PROCEDURE testeaza_introducere_elev_nou_grupa_unde_nu_mai_are_loc IS
    BEGIN
        INSERT INTO elevi (
            statut,
            nume,
            prenume,
            varsta,
            grupe_id_grupa,
            grupe_sali_id_sala
        ) VALUES (
            'incepator',
            'ddd',
            'ddd',
            6,
            1,
            1
        );

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_elev_in_spectacol_capacitate_atinsa_deja IS
        v_id_grupa grupe.id_grupa%TYPE;
        v_id_spect spectacole.id_spectacol%TYPE;
    BEGIN
        SELECT
            grupe_id_grupa
        INTO v_id_grupa
        FROM
            elevi
        WHERE
            id_elev = 12;

        SELECT
            id_spectacol
        INTO v_id_spect
        FROM
            spectacole
        WHERE
            nume_spectacol = 'Ghioceii';

        DELETE FROM elevi_spectacol
        WHERE
            spectacole_id_spectacol = v_id_spect;

        DELETE FROM elevi_spectacol_istoric
        WHERE
            id_spectacol = v_id_spect;

        adaugare.elev_la_spectacol(10, 'Ghioceii');
        adaugare.elev_la_spectacol(11, 'Ghioceii');
        adaugare.elev_spect_istoric(12, v_id_grupa, v_id_spect);
        adaugare.elev_la_spectacol(13, 'Ghioceii');
    END;

    PROCEDURE testeaza_trigger_actualizare_experienta_cadru_didactic_crapa IS
    BEGIN
        actualizari.modifica_experienta_instructor(5, 6);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_trigger_actualizare_experienta_cadru_didactic IS
    BEGIN
        actualizari.modifica_experienta_instructor(5, 16);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_spectacol_data_in_viitor IS
    BEGIN
        adaugare.nou_spectacol('numerge', 10, '2024-2-2');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.testare_vizualizari IS

    PROCEDURE testeaza_afisare_elevi IS
    BEGIN
        vizualizari.afiseaza_elevi;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_elevi_din_grupa_5 IS
    BEGIN
        vizualizari.afiseaza_elevi_din_anumita_grupa(5);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_elevi_din_grupa_invalida IS
    BEGIN
        vizualizari.afiseaza_elevi_din_anumita_grupa(99999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_grupe_din_sala_invalida IS
    BEGIN
        vizualizari.afiseaza_grupele_asignate_unei_anumite_sali(9999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_pianistul_grupei_1 IS
    BEGIN
        vizualizari.afiseaza_pianistul_unei_grupe(1);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_pianist_grupa_invalida IS
    BEGIN
        vizualizari.afiseaza_pianistul_unei_grupe(999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_spectacole_la_care_nu_au_fost_introdusi_elevi IS
    BEGIN
        vizualizari.afiseaza_spectacolele_la_care_nu_au_fost_introdusi_elevi;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_afisare_grupe_in_care_mai_incap_elevi IS
    BEGIN
        vizualizari.afiseaza_grupe_in_care_mai_incap_elevi;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.teste_actualizari IS

    PROCEDURE testeaza_modifica_experienta_pianist IS
    BEGIN
        actualizari.modifica_experienta_pianist(7, 21);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_modifica_experienta_daca_e_invalida_conform_triggerului_pianist IS
    BEGIN
        actualizari.modifica_experienta_pianist(7, 5);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_modifica_experienta_instructor IS
    BEGIN
        actualizari.modifica_experienta_instructor(21, 5);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_modifica_experienta_daca_e_invalida_conform_triggerului_instructor IS
    BEGIN
        actualizari.modifica_experienta_instructor(2, 5);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_modifica_statut_grupa IS
        v_id_grupa grupe.id_grupa%TYPE;
        v_id_sala  sali.id_sala%TYPE;
    BEGIN
        SELECT
            MAX(id_grupa)
        INTO v_id_grupa
        FROM
            grupe;

        SELECT
            sali_id_sala
        INTO v_id_sala
        FROM
            grupe
        WHERE
            id_grupa = v_id_grupa;

        actualizari.modifica_statut_grupa(v_id_grupa, 'incepator');
        INSERT INTO elevi (
            statut,
            nume,
            prenume,
            varsta,
            grupe_id_grupa,
            grupe_sali_id_sala
        ) VALUES (
            'incepator',
            'ccc',
            'ccc',
            7,
            v_id_grupa,
            v_id_sala
        );

        actualizari.modifica_statut_grupa(v_id_grupa, 'profesionist');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_modifica_statut_invalid_grupa IS
        v_id_grupa grupe.id_grupa%TYPE;
    BEGIN
        SELECT
            MAX(id_grupa)
        INTO v_id_grupa
        FROM
            grupe;

        actualizari.modifica_statut_grupa(v_id_grupa, 'lalala');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END teste_actualizari;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.teste_adaugari IS

    PROCEDURE testeaza_adaugare_sala_capacitate_invalida IS
    BEGIN
        adaugare.nou_sala(11, -5);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_sala_dimensiune_invalida IS
    BEGIN
        adaugare.nou_sala(2, 5);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_sala IS
    BEGIN
        DELETE FROM sali
        WHERE
                dimensiune = 66
            AND capacitate = 6;

        adaugare.nou_sala(66, 6);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_noua_grupa IS
    BEGIN
        DELETE FROM grupe
        WHERE
                statut = 'profesionist'
            AND sali_id_sala = 3;

        adaugare.nou_grupa('profesionist', 3);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_noua_grupa_in_sala_inexistenta IS
    BEGIN
        adaugare.nou_grupa('incepator', 9999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_noua_grupa_statut_invalid IS
    BEGIN
        adaugare.nou_grupa('lalala', 3);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_nou_pianist_care_nu_corespunde_grupei IS
    BEGIN
        DELETE FROM pianisti
        WHERE
            grupe_id_grupa = 8;

        adaugare.nou_pianist('nou', 'instructo', 'incepator', 5, 8);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_nou_pianist IS
    BEGIN
        DELETE FROM pianisti
        WHERE
            grupe_id_grupa = 8;

        adaugare.nou_pianist('nou', 'pianist', 'profesionist', 5, 8);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_nou_pianist_pentru_grupa_care_are_deja_unul IS
    BEGIN
        adaugare.nou_pianist('nou', 'pianist', 'incepator', 4, 4);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_nou_instructor_care_nu_corespunde_grupei IS
    BEGIN
        DELETE FROM instructori
        WHERE
            grupe_id_grupa = 8;

        adaugare.nou_instructor('nou', 'instructo', 'incepator', 5, 8);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_nou_instructor IS
    BEGIN
        DELETE FROM instructori
        WHERE
            grupe_id_grupa = 8;

        adaugare.nou_instructor('nou', 'instructo', 'profesionist', 5, 8);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_nou_instructor_pentru_grupa_care_are_deja_unul IS
    BEGIN
        adaugare.nou_instructor('nou', 'instructor', 'incepator', 4, 4);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_elev_nou_care_ar_trb_sa_ajunga_in_grupa_2 IS
    BEGIN
        DELETE FROM elevi
        WHERE
                nume = 'elev'
            AND prenume = 'nou';

        adaugare.nou_elev('incepator', 'elev', 'nou', 7);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_elev_nou_cu_varsta_invalida IS
    BEGIN
        adaugare.nou_elev('incepator', 'elev', 'nou', 1);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_elev_nou_cu_statut_invalid IS
    BEGIN
        adaugare.nou_elev('statutinvalid', 'elev', 'nou', 7);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_spectacol_cu_capacitate_invalida IS
    BEGIN
        adaugare.nou_spectacol('Trandafirii', -2, '2023-03-21');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_spectacol_cu_data_invalida IS
    BEGIN
        adaugare.nou_spectacol('Trandafirii', 3, '202322-21');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END testeaza_adaugare_spectacol_cu_data_invalida;

    PROCEDURE testeaza_adaugare_spectacol_cu_data_in_viitor IS
    BEGIN
        adaugare.nou_spectacol('Trandafirii', 3, '2023-09-21');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_spectacol_corect IS
        v_spectacol_nume NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_spectacol_nume
        FROM
            spectacole
        WHERE
            nume_spectacol = 'NOU';

        IF v_spectacol_nume > 0 THEN
            DELETE FROM spectacole
            WHERE
                nume_spectacol = 'NOU';

        END IF;
        adaugare.nou_spectacol('NOU', 3, '2023-2-21');
        dbms_output.put_line('S-a adaugat spectacolul');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_elev_la_spectacol_unde_nu_mai_are_loc IS
    BEGIN
        DELETE FROM elevi_spectacol
        WHERE
            spectacole_id_spectacol = 29;

        adaugare.elev_la_spectacol(10, 'Ghioceii');
        adaugare.elev_la_spectacol(11, 'Ghioceii');
        adaugare.elev_la_spectacol(12, 'Ghioceii');
        adaugare.elev_la_spectacol(13, 'Ghioceii');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END testeaza_adaugare_elev_la_spectacol_unde_nu_mai_are_loc;

    PROCEDURE testeaza_adaugare_elev_la_spectacol_inexistent IS
    BEGIN
        adaugare.elev_la_spectacol(13, 'aaa');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_adaugare_elev_inexistent_la_spectacol IS
    BEGIN
        adaugare.elev_la_spectacol(9999, 'Dansand printre stele');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END teste_adaugari;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.teste_stergeri IS

    PROCEDURE testeaza_adaugare_spectacol_data_in_viitor IS
    BEGIN
        adaugare.nou_spectacol('numerge', 10, '2022-2-2');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_pianist IS
        v_id_instructor pianisti.id_pianist%TYPE;
    BEGIN
        adaugare.nou_pianist('test', 'test', 'incepator', 11, 13);
        SELECT
            MAX(id_pianist)
        INTO v_id_instructor
        FROM
            pianisti;

        stergeri.pianist(v_id_instructor);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_instructor IS
        v_id_instructor instructori.id_instructor%TYPE;
    BEGIN
        adaugare.nou_instructor('test', 'test', 'incepator', 11, 13);
        SELECT
            MAX(id_instructor)
        INTO v_id_instructor
        FROM
            instructori;

        stergeri.instructor(v_id_instructor);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_instructor_inexistent IS
    BEGIN
        stergeri.instructor(9999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_pianist_inexistent IS
    BEGIN
        stergeri.pianist(9999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_spectacol_inexistent IS
    BEGIN
        stergeri.spectacol('NUEXISTA');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_spectacol IS
    BEGIN
        adaugare.nou_spectacol('NouSpect', 11, '2023-9-23');
        stergeri.spectacol('NouSpect');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_elev_spectacol IS
    BEGIN
        adaugare.elev_la_spectacol(10, 'Nopti albe');
        dbms_output.put_line('Am inserat elevul la Nopti albe');
        stergeri.elev_spectacol(10, 'Nopti albe');
        dbms_output.put_line('Apoi l-am sters');
    END;

    PROCEDURE testeaza_stergere_elev_inexistent IS
    BEGIN
        stergeri.elev(9999);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_stergere_elev_care_are_spectacole IS
        v_elev_nou_inserat  elevi%rowtype;
        v_elev_la_spectacol elevi_spectacol%rowtype;
    BEGIN
        adaugare.nou_elev('profesionist', 'test', 'test', 8);
        SELECT
            *
        INTO v_elev_nou_inserat
        FROM
            elevi
        WHERE
                nume = 'test'
            AND prenume = 'test'
            AND varsta = 8
            AND statut = 'profesionist';

        dbms_output.put_line('Am inserat elevul nou care va avea id-ul ' || v_elev_nou_inserat.id_elev);
        adaugare.elev_la_spectacol(v_elev_nou_inserat.id_elev, 'Nopti albe');
        SELECT
            *
        INTO v_elev_la_spectacol
        FROM
            elevi_spectacol
        WHERE
                elevi_id_elev = v_elev_nou_inserat.id_elev
            AND spectacole_id_spectacol = (
                SELECT
                    id_spectacol
                FROM
                    spectacole
                WHERE
                    nume_spectacol = 'Nopti albe'
            );

        dbms_output.put_line('Am inserat la spectacolul Nopti albe');
        stergeri.elev(v_elev_nou_inserat.id_elev);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.teste_tranzactii IS

    PROCEDURE testeaza_avansare_elev_care_nu_mai_are_loc_in_grupa_avansata IS
    BEGIN
        adaugare.elev_la_spectacol(33, 'Dansand printre stele');
        adaugare.elev_la_spectacol(33, 'Cinderella');
        dbms_output.put_line('Elevul inainte de tranzactie : ');
        vizualizari.afiseaza_elev(33);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev(33);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(33);
        avansare_elevi.modifica(33);
        dbms_output.put_line('Elevul dupa tranzactie : ');
        vizualizari.afiseaza_elev(33);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev(33);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(33);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Elevul dupa ce a esuat tranzactia');
            vizualizari.afiseaza_elev(34);
            vizualizari.afiseaza_spectacole_la_care_a_participat_elev(34);
            vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(34);
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_tranzactie_avansare_elev_reusita_cu_succes IS
    BEGIN
        --se avanseaza elevul cu id-ul 34 care e incepator si e in grupa 1
        --el ar trebui avansat in unele din grupele 3 sau 4 cu statut mediu
        --dar 3 e plina, asa ca il va adauga in 4
        --spectacolele lui trebuie scoase din elevi_spectacol si adaugate la istoric 
        --(trebuie pastrata o evidenta concreta a elevilor care au participat la spectacole dupa schimbarea statutului
        --in caz ca se va tine cont de spectacolele la care au participat la avansarea lor)

        adaugare.elev_la_spectacol(34, 'Dansand printre stele');
        adaugare.elev_la_spectacol(34, 'Cinderella');
        dbms_output.put_line('Elevul inainte de tranzactie : ');
        vizualizari.afiseaza_elev(34);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev(34);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(34);
        avansare_elevi.modifica(34);
        dbms_output.put_line('Elevul dupa tranzactie : ');
        vizualizari.afiseaza_elev(34);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev(34);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(34);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE revino_la_datele_de_dinainte_de_tranzactie_pentru_retestare IS
    BEGIN
        DELETE FROM elevi_spectacol_istoric
        WHERE
            id_elev = 34;

        actualizari.modifica_elev_statut_grupa_sala(34, 1, 'incepator');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE testeaza_tranzactie_cu_elev_deja_profesionist IS
    BEGIN
        adaugare.elev_la_spectacol(17, 'Dansand printre stele');
        adaugare.elev_la_spectacol(17, 'Cinderella');
        dbms_output.put_line('Elevul inainte de tranzactie : ');
        vizualizari.afiseaza_elev(17);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev(17);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(17);
        avansare_elevi.modifica(17);
        dbms_output.put_line('Elevul dupa tranzactie : ');
        vizualizari.afiseaza_elev(17);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev(17);
        vizualizari.afiseaza_spectacole_la_care_a_participat_elev_din_istoric(17);
    END;

END;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.verificari IS

    PROCEDURE verifica_daca_statutul_e_valid (
        p_statut IN elevi.statut%TYPE
    ) IS
        statut_incorect EXCEPTION;
    BEGIN
        IF
            p_statut != 'incepator'
            AND p_statut != 'mediu'
            AND p_statut != 'avansat'
            AND p_statut != 'profesionist'
        THEN
            RAISE statut_incorect;
        END IF;
    EXCEPTION
        WHEN statut_incorect THEN
            raise_application_error(-20008, 'Statutul este incorect');
    END;

    PROCEDURE verifica_daca_statutul_corespunde_grupei (
        p_id_grupa IN grupe.id_grupa%TYPE,
        statt      IN grupe.statut%TYPE
    ) IS
        v_statut grupe.statut%TYPE;
        nu_corespunde EXCEPTION;
    BEGIN
        SELECT
            statut
        INTO v_statut
        FROM
            grupe
        WHERE
            id_grupa = p_id_grupa;

        IF statt != v_statut THEN
            RAISE nu_corespunde;
        END IF;
    EXCEPTION
        WHEN nu_corespunde THEN
            raise_application_error(-20069, 'Statutul cadrului didactic nu corespunde grupei');
    END;

    PROCEDURE verifica_daca_grupa_are_nevoie_de_pianist (
        p_id_grupa IN grupe.id_grupa%TYPE
    ) IS
        nu_are_nevoie EXCEPTION;
        v_count_instructor NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count_instructor
        FROM
            pianisti
        WHERE
            grupe_id_grupa = p_id_grupa;

        IF v_count_instructor > 0 THEN
            RAISE nu_are_nevoie;
        END IF;
    EXCEPTION
        WHEN nu_are_nevoie THEN
            raise_application_error(-20035, 'Grupa are deja un pianist');
    END;

    PROCEDURE verifica_daca_grupa_are_nevoie_de_instructor (
        p_id_grupa IN grupe.id_grupa%TYPE
    ) IS
        nu_are_nevoie EXCEPTION;
        v_count_instructor NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count_instructor
        FROM
            instructori
        WHERE
            grupe_id_grupa = p_id_grupa;

        IF v_count_instructor > 0 THEN
            RAISE nu_are_nevoie;
        END IF;
    EXCEPTION
        WHEN nu_are_nevoie THEN
            raise_application_error(-20036, 'Grupa are deja un instructor');
    END;

    PROCEDURE verifica_daca_exsita_grupa (
        p_id_grupa IN grupe.id_grupa%TYPE
    ) IS
        v_nr_grupe NUMBER;
        nu_exista_grupa EXCEPTION;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_nr_grupe
        FROM
            grupe
        WHERE
            id_grupa = p_id_grupa;

        IF v_nr_grupe = 0 THEN
            RAISE nu_exista_grupa;
        END IF;
    EXCEPTION
        WHEN nu_exista_grupa THEN
            raise_application_error(-20049, 'Nu exista grupa');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE verifica_daca_exista_instructor (
        p_id_instructor IN instructori.id_instructor%TYPE
    ) IS
        v_nr_instructori NUMBER;
        nu_exista_instructor EXCEPTION;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_nr_instructori
        FROM
            instructori
        WHERE
            id_instructor = p_id_instructor;

        IF v_nr_instructori = 0 THEN
            RAISE nu_exista_instructor;
        END IF;
    EXCEPTION
        WHEN nu_exista_instructor THEN
            raise_application_error(-20050, 'Nu exista instructor');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE verifica_daca_exista_pianist (
        p_id_pianist IN pianisti.id_pianist%TYPE
    ) IS
        v_nr_pianisti NUMBER;
        nu_exista_pianist EXCEPTION;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_nr_pianisti
        FROM
            pianisti
        WHERE
            id_pianist = p_id_pianist;

        IF v_nr_pianisti = 0 THEN
            RAISE nu_exista_pianist;
        END IF;
    EXCEPTION
        WHEN nu_exista_pianist THEN
            raise_application_error(-20051, 'Nu exista pianist');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE verifica_daca_exista_sala (
        p_id_sala IN sali.id_sala%TYPE
    ) IS
        v_nr_sali NUMBER;
        nu_exista_sala EXCEPTION;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_nr_sali
        FROM
            sali
        WHERE
            id_sala = p_id_sala;

        IF v_nr_sali = 0 THEN
            RAISE nu_exista_sala;
        END IF;
    EXCEPTION
        WHEN nu_exista_sala THEN
            raise_application_error(-20058, 'Nu exista sala');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE verifica_daca_exista_elev (
        p_id_elev IN elevi.id_elev%TYPE
    ) IS

        CURSOR c IS
        SELECT
            nume
        FROM
            elevi
        WHERE
            id_elev = p_id_elev;

        v_nume elevi.nume%TYPE;
        inexistent EXCEPTION;
    BEGIN
        OPEN c;
        FETCH c INTO v_nume;
        IF c%rowcount = 0 THEN
            RAISE inexistent;
        END IF;
    EXCEPTION
        WHEN inexistent THEN
            raise_application_error(-20003, 'Nu exista elev');
    END verifica_daca_exista_elev;

    PROCEDURE verifica_daca_exista_spectacol_cu_acest_nume (
        p_nume IN spectacole.nume_spectacol%TYPE
    ) IS
        v_nr_spectacole_cu_acest_nume NUMBER;
        spectacol_nu_exista EXCEPTION;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_nr_spectacole_cu_acest_nume
        FROM
            spectacole
        WHERE
            nume_spectacol = p_nume;

        IF v_nr_spectacole_cu_acest_nume = 0 THEN
            RAISE spectacol_nu_exista;
        END IF;
    EXCEPTION
        WHEN spectacol_nu_exista THEN
            raise_application_error(-20013, 'Nu exista un astfel de spectacol');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END verifica_daca_exista_spectacol_cu_acest_nume;

    PROCEDURE verifica_daca_exista_deja_spectacol_cu_acest_nume (
        p_nume IN spectacole.nume_spectacol%TYPE
    ) IS
        v_nr_spectacole_cu_acest_nume NUMBER;
        spectacol_deja_exista EXCEPTION;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_nr_spectacole_cu_acest_nume
        FROM
            spectacole
        WHERE
            nume_spectacol = p_nume;

        IF v_nr_spectacole_cu_acest_nume > 0 THEN
            RAISE spectacol_deja_exista;
        END IF;
    EXCEPTION
        WHEN spectacol_deja_exista THEN
            raise_application_error(-20009, 'Deja exista un spectacol cu acest nume');
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END verifica_daca_exista_deja_spectacol_cu_acest_nume;

    PROCEDURE verifica_daca_capacitatea_e_corecta (
        p_capacitate IN spectacole.capacitate%TYPE
    ) IS
        capacitate_invalida EXCEPTION;
        v_number_value NUMBER;
    BEGIN
        v_number_value := TO_NUMBER ( p_capacitate );
        IF p_capacitate < 1 OR p_capacitate > 30 THEN
            RAISE capacitate_invalida;
        END IF;
    EXCEPTION
        WHEN value_error THEN
            raise_application_error(-20070, 'Capacitatea nu este un numar valid');
        WHEN capacitate_invalida THEN
            raise_application_error(-20070, 'Capacitatea nu este un numar valid');
    END;

END verificari;
/

CREATE OR REPLACE PACKAGE BODY pbd_stud_121.vizualizari IS

    PROCEDURE afiseaza_spectacole_la_care_a_participat_elev (
        p_id_elev elevi.id_elev%TYPE
    ) IS
        CURSOR c IS
        SELECT
            id_spectacol
        FROM
            elevi_spectacol_istoric
        WHERE
            id_elev = p_id_elev;

        v_id_spectacol spectacole.id_spectacol%TYPE;
    BEGIN
        verificari.verifica_daca_exista_elev(p_id_elev);
        dbms_output.put_line('Spectacolele din istoric la care a participat elevul: ');
        OPEN c;
        LOOP
            FETCH c INTO v_id_spectacol;
            EXIT WHEN c%notfound;
            dbms_output.put_line(v_id_spectacol);
        END LOOP;

        CLOSE c;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE afiseaza_spectacole_la_care_a_participat_elev_din_istoric (
        p_id_elev elevi.id_elev%TYPE
    ) IS
        CURSOR c IS
        SELECT
            spectacole_id_spectacol
        FROM
            elevi_spectacol
        WHERE
            elevi_id_elev = p_id_elev;

        v_id_spectacol spectacole.id_spectacol%TYPE;
    BEGIN
        verificari.verifica_daca_exista_elev(p_id_elev);
        dbms_output.put_line('Spectacolele la care a participat elevul: ');
        OPEN c;
        LOOP
            FETCH c INTO v_id_spectacol;
            EXIT WHEN c%notfound;
            dbms_output.put_line(v_id_spectacol);
        END LOOP;

        CLOSE c;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE afiseaza_elev (
        p_id_elev elevi.id_elev%TYPE
    ) IS
        v_elev elevi%rowtype;
    BEGIN
        verificari.verifica_daca_exista_elev(p_id_elev);
        SELECT
            *
        INTO v_elev
        FROM
            elevi
        WHERE
            id_elev = p_id_elev;

        dbms_output.put_line('Elevul cu id-ul '
                             || p_id_elev
                             || ' este :'
                             || v_elev.nume
                             || ' '
                             || v_elev.prenume
                             || ' aflat in grupa '
                             || v_elev.grupe_id_grupa
                             || 'cu statutul de '
                             || v_elev.statut
                             || ' cu varsta de '
                             || v_elev.varsta);

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE afiseaza_grupe_in_care_mai_incap_elevi IS

        CURSOR c IS
        SELECT
            *
        FROM
            grupe;

        v_row        grupe%rowtype;
        v_capacitate sali.capacitate%TYPE;
        v_nr_elevi   NUMBER;
        v_e          NUMBER;
    BEGIN
        OPEN c;
        LOOP
            FETCH c INTO v_row;
            EXIT WHEN c%notfound;
            SELECT
                capacitate
            INTO v_capacitate
            FROM
                sali
            WHERE
                id_sala = v_row.sali_id_sala;

            SELECT
                COUNT(*)
            INTO v_nr_elevi
            FROM
                elevi
            WHERE
                grupe_id_grupa = v_row.id_grupa;

            IF v_nr_elevi < v_capacitate THEN
                v_e := v_capacitate - v_nr_elevi;
                dbms_output.put_line('In grupa '
                                     || v_row.id_grupa
                                     || ' mai incap '
                                     || v_e
                                     || ' elevi.');

            END IF;

        END LOOP;

    END;

    PROCEDURE afiseaza_spectacolele_la_care_nu_au_fost_introdusi_elevi IS

        CURSOR c IS
        SELECT
            *
        FROM
            spectacole;

        v_nr_elevi         NUMBER;
        v_nr_elevi_istoric NUMBER;
        v_row              spectacole%rowtype;
        v_flag             BOOLEAN := false;
    BEGIN
        OPEN c;
        LOOP
            FETCH c INTO v_row;
            EXIT WHEN c%notfound;
            SELECT
                COUNT(*)
            INTO v_nr_elevi
            FROM
                elevi_spectacol
            WHERE
                spectacole_id_spectacol = v_row.id_spectacol;

            SELECT
                COUNT(*)
            INTO v_nr_elevi_istoric
            FROM
                elevi_spectacol_istoric
            WHERE
                id_spectacol = v_row.id_spectacol;

            v_nr_elevi := v_nr_elevi + v_nr_elevi_istoric;
            IF v_nr_elevi = 0 THEN
                v_flag := true;
                dbms_output.put_line('Spectacolul '
                                     || v_row.nume_spectacol
                                     || ' nu are niciun elev introdus');
            END IF;

        END LOOP;

        CLOSE c;
        IF v_flag = false THEN
            dbms_output.put_line('Nu sau gasit spectacole la care sa nu fi fost introdus niciun elev ');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE afiseaza_pianistul_unei_grupe (
        p_id_grupa grupe.id_grupa%TYPE
    ) IS
        CURSOR c IS
        SELECT
            *
        FROM
            pianisti
        WHERE
            grupe_id_grupa = p_id_grupa;

        v_row pianisti%rowtype;
    BEGIN
        dbms_output.put_line('Pianistul grupei '
                             || p_id_grupa
                             || ' este: ');
        verificari.verifica_daca_exsita_grupa(p_id_grupa);
        OPEN c;
        LOOP
            FETCH c INTO v_row;
            EXIT WHEN c%notfound;
            dbms_output.put_line(v_row.nume
                                 || ' '
                                 || v_row.prenume);
        END LOOP;

    END;

    PROCEDURE afiseaza_elevi IS
        CURSOR c IS
        SELECT
            *
        FROM
            elevi;

        v_elev elevi%rowtype;
    BEGIN
        OPEN c;
        LOOP
            FETCH c INTO v_elev;
            EXIT WHEN c%notfound;
            dbms_output.put_line('Elevul : '
                                 || v_elev.nume
                                 || ' '
                                 || v_elev.prenume
                                 || ' cu varsta '
                                 || v_elev.varsta
                                 || ' cu statutul '
                                 || v_elev.statut
                                 || ' este in grupa '
                                 || v_elev.grupe_id_grupa);

        END LOOP;

        CLOSE c;
    END;

    PROCEDURE afiseaza_elevi_din_anumita_grupa (
        p_id_grupa grupe.id_grupa%TYPE
    ) IS
        CURSOR c IS
        SELECT
            *
        FROM
            elevi
        WHERE
            grupe_id_grupa = p_id_grupa;

        v_elev elevi%rowtype;
    BEGIN
        verificari.verifica_daca_exsita_grupa(p_id_grupa);
        OPEN c;
        dbms_output.put_line('Elevii grupei '
                             || p_id_grupa
                             || ' sunt: ');
        LOOP
            FETCH c INTO v_elev;
            EXIT WHEN c%notfound;
            dbms_output.put_line('Elevul : '
                                 || v_elev.nume
                                 || ' '
                                 || v_elev.prenume
                                 || ' cu varsta '
                                 || v_elev.varsta
                                 || ' cu statutul '
                                 || v_elev.statut);

        END LOOP;

        IF c%rowcount = 0 THEN
            dbms_output.put_line('Nu sunt elevi in aceasta grupa ');
        END IF;
        CLOSE c;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

    PROCEDURE afiseaza_grupele_asignate_unei_anumite_sali (
        p_id_sala sali.id_sala%TYPE
    ) IS
        CURSOR c IS
        SELECT
            *
        FROM
            grupe
        WHERE
            sali_id_sala = p_id_sala;

        v_row grupe%rowtype;
    BEGIN
        verificari.verifica_daca_exista_sala(p_id_sala);
        dbms_output.put_line('Grupele asignate salii '
                             || v_row.sali_id_sala
                             || ' sunt: ');
        OPEN c;
        LOOP
            FETCH c INTO v_row;
            EXIT WHEN c%notfound;
            dbms_output.put_line('Grupa ' || v_row.id_grupa);
        END LOOP;

        IF c%rowcount = 0 THEN
            dbms_output.put_line('Nu s-au gasit grupe ');
        END IF;
        CLOSE c;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error: ' || sqlerrm);
    END;

END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                            10
-- ALTER TABLE                             36
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                          13
-- CREATE PACKAGE BODY                     13
-- CREATE PROCEDURE                         6
-- CREATE FUNCTION                          1
-- CREATE TRIGGER                           5
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              1
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
